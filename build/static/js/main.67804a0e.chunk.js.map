{"version":3,"sources":["util/request.js","components/Header/DataCard.jsx","App.js","serviceWorker.js","index.js"],"names":["request","url","fetch","then","res","ok","json","message","error","setTimeout","window","location","href","catch","err","console","Header","_ref","_useState","useState","_useState2","Object","slicedToArray","data","setData","useEffect","react_default","a","createElement","className","row","gutter","col","span","card","title","bordered","confirmed","value","recovered","deaths","spin","Option","App","country","setCountryList","_useState3","_useState4","singleCountry","setSingleCountry","log","style","paddingBottom","es_select","defaultValue","width","onChange","entries","countries","map","_ref2","code","key","concat","split","length","iso3","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67804a0e.chunk.js","sourcesContent":["import { message } from 'antd'\nexport default function request(url) {\n  return fetch(url)\n    .then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      message.error('出错啦~')\n      setTimeout(() => {\n        window.location.href = '/'\n      }, 1000)\n    })\n    .catch(err => console.error(err.message))\n}\n","import React, { useState, useEffect } from 'react'\nimport request from '../../util/request'\nimport { Spin, Card, Col, Row } from 'antd'\nimport './card.less'\nexport default function Header({ url }) {\n  const [data, setData] = useState(null)\n  useEffect(() => {\n    request(url).then(res => {\n      setData(res)\n    })\n  }, [url])\n  if (!data) {\n    return <Spin></Spin>\n  }\n  return (\n    <div className='site-card-wrapper'>\n      <Row gutter={16}>\n        <Col span={8}>\n          <Card title='confirmed' bordered={false}>\n            {data.confirmed.value}\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card title='recovered' bordered={false}>\n            {data.recovered.value}\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card title='deaths' bordered={false}>\n            {data.deaths.value}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport DataCard from './components/Header/DataCard'\nimport request from './util/request'\nimport { Select, Row, Col } from 'antd'\nconst { Option } = Select\nfunction App() {\n  const [country, setCountryList] = useState(null)\n  const [singleCountry, setSingleCountry] = useState('China')\n  useEffect(() => {\n    request('https://covid19.mathdro.id/api/countries').then(res => {\n      console.log(res)\n      setCountryList(res)\n    })\n  }, [])\n  const handleChange = value => {\n    console.log(value)\n    setSingleCountry(value)\n  }\n  return (\n    <div className='App'>\n      <h1>Global Coronavirus disease Data</h1>\n      <DataCard url='https://covid19.mathdro.id/api'></DataCard>\n      <h2>Single Country Data</h2>\n      <Row style={{ paddingBottom: 20 }}>\n        <Col span={12}>\n          <Select\n            defaultValue={singleCountry}\n            style={{ width: 120 }}\n            onChange={handleChange}\n          >\n            {country &&\n              Object.entries(country.countries).map(([country, code]) => (\n                <Option value={country} key={code}>\n                  {country}\n                </Option>\n              ))}\n          </Select>\n        </Col>\n        <Col span={12}>{singleCountry}</Col>\n      </Row>\n      <DataCard\n        url={`https://covid19.mathdro.id/api/countries/${\n          singleCountry.split(' ').length > 1\n            ? country.iso3[country.countries[singleCountry]]\n            : singleCountry\n        }`}\n      ></DataCard>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}